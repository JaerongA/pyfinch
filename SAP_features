import os
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
from scipy import stats
from sklearn.decomposition import PCA
from sklearn import datasets
from sklearn.preprocessing import StandardScaler



# projectROOT = r'C:\Users\jahn02\Box\Data\Deafening Project';  # lab
projectROOT = r'H:\Box\Data\Deafening Project'  # home
dataROOT = projectROOT + '\Analysis\SAP_features'
analysis_file = 'SAP(ALL).txt'

os.chdir(dataROOT)
df = pd.read_csv(analysis_file, delimiter="\t")
df = df.query('Context == "Undir"')  # select only Undir trials

df.columns

df_pca = df.loc[:, 'AmplitudeModulation':'PitchGoodness']

# Preprocessing - standardize the value
scaler = StandardScaler()
scaler.fit(df_pca)
scaled_data = scaler.transform(df_pca)
print(scaled_data)

# Build PCA
pca = PCA(n_components=3)
pca.fit(scaled_data)
pca_data = pca.transform(scaled_data)
pca_data.shape













# am = df['AmplitudeModulation']
# fm = df['FrequencyModulation']
# entropy = df['SAP_Entropy']
# ev = df['SAP_EV']
# log_amplitude = df['LogAmplitude']
# gravity_center = df['GravityCenter']
# pitch_goodness =  df['PitchGoodness']
#
# am_zscore = preprocessing.scale(am)
# print(am_zscore)
#
# pca = PCA()
# pca.fit(am_zscore)
# pca_data = pca.transform(am_zscore)









#----------- PCA section for different conditions -----------------

# def unique(list):
#     seen = set()
#     return [x for x in list if not (x in seen or seen.add(x))]
#
# bird_list = unique(df['BirdID'].tolist())
# task_list = unique(df['TaskName'].tolist())
# note_list = unique(df['Note'].tolist())
#
# print(bird_list)
#
#
# for bird in bird_list:
#     for task in task_list:
#         print('Prcessing... {} from Bird {}'.format(task, bird))
#
#         temp_df = []
#         temp_df = df.loc[(df['BirdID'] == bird) & (df['TaskName'] == task), 'AmplitudeModulation':'PitchGoodness']
#
#         scaled_df = preprocessing.scale(temp_df.T)
#
#         pca = PCA()
#         pca.fit(scaled_df)
#         pca_data = pca.transform(scaled_df)

#------------------------------------------------------------------------------------------


        # df_pca = df.loc[:, 'AmplitudeModulation':'PitchGoodness']








#
# fig = plt.figure(figsize=(18, 9))
#
# plt.suptitle('PitchGoodness (Undir)', size=20)
# circ_size = 1
#
# # Create multiple dataframes per bird
# df_b70r38 = df[df['BirdID'] == 'b70r38']
# df_g35r38 = df[df['BirdID'] == 'g35r38']
# df_w16w14 = df[df['BirdID'] == 'w16w14']
# df_b4r64 = df[df['BirdID'] == 'b4r64']
# df_b14r74 = df[df['BirdID'] == 'b14r74']
# df_w21w30 = df[df['BirdID'] == 'w21w30']
# df_g70r40 = df[df['BirdID'] == 'g70r40']
#
# gs = gridspec.GridSpec(2, 9)
# ax1a = plt.subplot(gs[0, 1:3])
# sns.lineplot(x='TaskSessionPostdeafening', y='PitchGoodness', hue='Note', data=df_b70r38, ci=None, marker='o',
#              mew=circ_size)
# ax1a.spines['right'].set_visible(False), ax1a.spines['top'].set_visible(False)
# ax1a.set_ylabel('FrequencyModulation'), ax1a.set_title('b70r38')
# ax1a.set_xlabel('')
# # ax1a.set_ylim([0.75, 0.95])
#
#
# ax1b = plt.subplot(gs[0, 3:5], sharey=ax1a, sharex=ax1a)
# sns.lineplot(x='TaskSessionPostdeafening', y='PitchGoodness', hue='Note', data=df_g35r38, ci=None, marker='o',
#              mew=circ_size)
# ax1b.spines['right'].set_visible(False), ax1b.spines['top'].set_visible(False)
# ax1b.set_ylabel(''), ax1b.set_title('g35r38')
# ax1b.set_xlabel('')
# # ax1b.set_ylim([0, 0.035])
# fig.tight_layout()
#
# ax1c = plt.subplot(gs[0, 5:7], sharey=ax1a, sharex=ax1a)
# sns.lineplot(x='TaskSessionPostdeafening', y='PitchGoodness', hue='Note', data=df_w16w14, ci=None, marker='o',
#              mew=circ_size)
# ax1c.spines['right'].set_visible(False), ax1c.spines['top'].set_visible(False)
# ax1c.set_ylabel(''), ax1c.set_title('w16w14')
# ax1c.set_xlabel('')
# # ax1b.set_ylim([0, 0.035])
# fig.tight_layout()
#
# ax2a = plt.subplot(gs[1, :2], sharey=ax1a, sharex=ax1a)
# sns.lineplot(x='TaskSessionPostdeafening', y='PitchGoodness', hue='Note', data=df_b14r74, ci=None, marker='o',
#              mew=circ_size)
# ax2a.spines['right'].set_visible(False), ax2a.spines['top'].set_visible(False)
# ax2a.set_ylabel('AmplitudeModulation'), ax2a.set_title('b14r74')
# # ax2a.set_ylim([0.75, 0.95])
#
#
# ax2b = plt.subplot(gs[1, 2:4], sharey=ax2a, sharex=ax1a)
# sns.lineplot(x='TaskSessionPostdeafening', y='PitchGoodness', hue='Note', data=df_b4r64, ci=None, marker='o',
#              mew=circ_size)
# ax2b.spines['right'].set_visible(False), ax2b.spines['top'].set_visible(False)
# ax2b.set_ylabel(''), ax2b.set_title('b4r64')
#
# ax2c = plt.subplot(gs[1, 4:6], sharey=ax2a, sharex=ax1b)
# sns.lineplot(x='TaskSessionPostdeafening', y='PitchGoodness', hue='Note', data=df_w21w30, ci=None, marker='o',
#              mew=circ_size)
# ax2c.spines['right'].set_visible(False), ax2c.spines['top'].set_visible(False)
# ax2c.set_ylabel(''), ax2c.set_title('w21w30')
#
# ax2c = plt.subplot(gs[1, 6:8], sharey=ax2a, sharex=ax1b)
# sns.lineplot(x='TaskSessionPostdeafening', y='PitchGoodness', hue='Note', data=df_g70r40, ci=None, marker='o',
#              mew=circ_size)
# ax2c.spines['right'].set_visible(False), ax2c.spines['top'].set_visible(False)
# ax2c.set_ylabel(''), ax2c.set_title('g70r40')
#
# fig.tight_layout()
#
# fig.subplots_adjust(top=0.88)
# plt.show()
# plt.savefig("PitchGoodness.pdf", transparent=True)
